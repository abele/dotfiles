#!/usr/bin/env python2
# -*- coding: utf-8 -*-
import os
import sys
import subprocess
import shutil

VENV_VERSION = '13.0.1'
PYPI_VENV_BASE = 'https://pypi.python.org/packages/source/v/virtualenv'


def shellcmd(cmd, echo=True):
    """ Run 'cmd' in the shell and return its standard out."""
    if echo:
        print('[cmd] {0}'.format(cmd))

    out = subprocess.check_output(cmd, stderr=sys.stderr, shell=True)

    if echo:
        print(out)

    return out


def create_venv(initial_env='venv', python='python2'):
    dirname = 'virtualenv-' + VENV_VERSION
    tgz_file = dirname + '.tar.gz'
    cache_dir = os.path.join(os.path.expanduser('~'), '.cache', 'venv')

    if not os.path.isdir(cache_dir):
        os.makedirs(cache_dir)

    # Fetch virtualenv from PyPI
    if os.path.exists(os.path.join(cache_dir, tgz_file)):
        shutil.copy(os.path.join(cache_dir, tgz_file), os.getcwd())
    else:
        venv_url = PYPI_VENV_BASE + '/' + tgz_file
        shellcmd('wget -P {cache} {url}'.format(
            cache=cache_dir,
            url=venv_url
        ))
        shutil.copy(os.path.join(cache_dir, tgz_file), os.getcwd())

    # Untar
    shellcmd('tar xzf {0}'.format(tgz_file))

    # Create the initial env
    shellcmd('{0} {1}/virtualenv.py --distribute {2}'.format(
        python, dirname, initial_env))

    # Install the virtualenv package itself into the initial env
    shellcmd('{0}/bin/pip install {1}'.format(initial_env, tgz_file))
    # Upgrade PIP it self
    shellcmd('{0}/bin/pip install --upgrade pip'.format(initial_env))

    # Cleanup
    shellcmd('rm -rf {0} {1}'.format(dirname, tgz_file))


def main(initial_env='venv', python='python2'):
    try:
        create_venv(initial_env, python)
    except KeyboardInterrupt:
        pass

    return 0


if __name__ == '__main__':
    sys.exit(main())
