#!/usr/bin/env python3
"""Datacenter Control

Usage: dodc [options] ssh NAME

Control nodes in datacenter. By default show remote access credentials for node 
with NAME. Reads Linode key from DIGITAL_OCEAN_TOKEN environment variable.

Arguments:
NAME    Droplet name

Options:
-h --help                             Display this help and exit
-l LOG_LEVEL --log-level=LOG_LEVEL    Console logging log [default: error]

"""
import os
import sys
from pprint import pprint
import logging

import requests
from docopt import docopt

from difflib import SequenceMatcher as SM
from difflib import get_close_matches
import operator


def main(args=None):
    rc = os.EX_OK

    if not args:
        args = docopt(__doc__, version='Digital Ocean DC controll 0.1.0')
        logging.basicConfig(level=getattr(logging, args['--log-level'].upper()))

    logger = logging.getLogger(__name__)
    logger.debug(args)

    log = logging.getLogger(__name__)

    try:
        print_droplet_ssh_access(args['NAME'])
    except KeyboardInterrupt:
        pass
    except Exception:
        logger.exception('Something went wrong.')
        rc = os.EX_SOFTWARE

    return rc


def print_droplet_ssh_access(name):
    token = os.environ['DIGITAL_OCEAN_TOKEN']
    resp = requests.get(
        'https://api.digitalocean.com/v2/droplets?page=1&per_page=10',
        headers={
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token,
        },
    )
    droplets = parse_droplets(resp)
    match_name = first(get_close_matches(name, [d['name'] for d in droplets]))
    print('\n'.join(
        map(lambda ip_str: 'root@' + ip_str,
            map(
                lambda d: d['networks']['v4'][0]['ip_address'],
                [droplets[match_name]],
            ))))


def parse_droplets(resp):
    return resp.json()['droplets']


def first(iterable):
    return next(iter(iterable))


if __name__ == '__main__':

    sys.exit(main())
